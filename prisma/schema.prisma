generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  user      User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId    Int
  car       Car      @relation(fields: [carId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  carId     Int
  createdAt DateTime @default(now())
}

model Car {
  id          Int          @id @default(autoincrement())
  make        String
  model       String
  year        Int
  price       Float
  buyNowPrice Float?        // Optional Buy Now Price
  sold        Boolean       @default(false) // Status of whether the car is sold
  buyerId     Int?          // ID of the buyer (optional, set when sold)
  buyer       User?         @relation("BuyerRelation", fields: [buyerId], references: [id], onUpdate: NoAction, onDelete: NoAction) // Relation with buyer
  color       String?       // Add car color
  mileage     Int?          // Mileage in miles or kilometers
  owner       User          @relation("OwnerRelation", fields: [ownerId], references: [id], onUpdate: NoAction, onDelete: NoAction) // Relation with owner
  ownerId     Int
  description String?
  imageUrl    String?
  transactions Transaction[]
  bids        Bid[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  car       Car      @relation(fields: [carId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  carId     Int
  buyer     User     @relation("Buyer", fields: [buyerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  buyerId   Int
  seller    User     @relation("Seller", fields: [sellerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  sellerId  Int
  createdAt DateTime @default(now())
}

model User {
  id                 Int           @id @default(autoincrement())
  name               String
  email              String        @unique
  password           String
  carsOwned          Car[]         @relation("OwnerRelation") // Cars owned by the user
  carsBought         Car[]         @relation("BuyerRelation") // Cars bought by the user
  bids               Bid[]
  boughtTransactions Transaction[] @relation("Buyer")
  soldTransactions   Transaction[] @relation("Seller")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}
